https://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/530/week-3/3304/
Code:

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty())
            return -1;
        
        int index;
        index=find(nums,0,nums.size()-1);
        if(target>=nums[0] && target<=nums[index])
           return  binsearch(nums,target,0,index);
        else
           return  binsearch(nums,target,index+1,nums.size()-1);
        
    }
    int find(vector<int>& v,int s,int e){
      
        while(s<=e){
        if(s==e)
            return s;
        int mid=s+(e-s)/2;
        if(v[mid]>v[mid+1])
            return mid;
        if(v[s]>v[mid])
            e=mid-1;
        else
            s=mid+1;
        }
        return -1;
    }
    int binsearch(vector<int>& v,int x,int s,int e){
        while(s<=e){
        int mid=s+(e-s)/2;
        if(v[mid]==x)
            return mid;
        if(x<v[mid])
            e=mid-1;
        else    
            s=mid+1;
        }
        return -1;
    }
};
