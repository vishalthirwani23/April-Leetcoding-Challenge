https://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/531/week-4/3309/
Code:

class LRUCache {
    
public:
    
    unordered_map<int,pair<int,list<int>::iterator>> value;
    list<int> l;
    int size;
    LRUCache(int capacity) {
         size=capacity;
    }
    
    int get(int key) {
        auto it=value.find(key);
        if(it==value.end())
           return -1;
          l.erase(it->second.second);
          l.push_front(key);
          it->second.second=l.begin();
          return it->second.first; 
    }
    
    void put(int key, int v) {
        auto it=value.find(key);
        if(it==value.end()){
           if(value.size()==size){
               value.erase(l.back());
               l.pop_back();
           }
               l.push_front(key);
        }
       else{
            l.erase(it->second.second);
            l.push_front(key);
        }
           value[key]={v,l.begin()};
    }
};





