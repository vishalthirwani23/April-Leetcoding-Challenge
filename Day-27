https://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/531/week-4/3312/
Code:

Method 1: Using Two Vectors
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
         if(matrix.empty()) return 0;
        int m=matrix.size(),n=matrix[0].size(),ans=0;
        vector<int> dp(n+1,0);
      
        for(int i=1;i<=m;i++){
            vector<int> dp2(n+1);
            dp2[0]=0;
            for(int j=1;j<=n;j++){
                if(matrix[i-1][j-1]=='0')
                    dp2[j]=0;
                else
                    dp2[j]=1+min({dp2[j-1],dp[j-1],dp[j]});
                ans=max(ans,dp2[j]);
                
            }
            dp=dp2;
        }
            return ans*ans;
    }
};

Method 2: Using One Vector
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int m=matrix.size(),n=matrix[0].size(),ans=0,pre;
        vector<int> dp(n,0);
      
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int temp=dp[j];
                if(i==0 || j==0 || matrix[i][j]=='0')
                    dp[j]=matrix[i][j]-'0';
                else
                    dp[j]=1+min({dp[j-1],dp[j],pre});
                ans=max(ans,dp[j]);
                pre=temp;
            }
            
        }
            return ans*ans;
    }
};
