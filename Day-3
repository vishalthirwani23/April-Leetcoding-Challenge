https://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/528/week-1/3285/
Code:

Method 1: Kadane's Algorithm | Time Complexity: O(n) | Space Complexity: O(1)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans=INT_MIN,a=0;
       
        for(int x:nums){
            a=max(x,a+x);
            ans=max(ans,a);
        }
        return ans;
    }
};

Method 2: Divide and Conquer | Time Complexity: O(nlogn) 
class Solution {
public:
    int maxSubArrayUtil(vector<int>& nums,int l,int r){
        if(l==r) return nums[l];
        int mid=l + (r-l)/2;
        int x= maxSubArrayUtil(nums,l,mid);
        int y= maxSubArrayUtil(nums,mid+1,r);
        int left_sum=INT_MIN,right_sum=INT_MIN,sum=0;
        for(int i=mid;i>=l;i--){
            sum+=nums[i];
            left_sum=max(sum,left_sum);
        }
        sum=0;
         for(int i=mid+1;i<=r;i++){
            sum+=nums[i];
            right_sum=max(sum,right_sum);
        }
        return max({x,y,left_sum+right_sum});
    }
    int maxSubArray(vector<int>& nums) {
       int l=0,r=nums.size()-1;
       return maxSubArrayUtil(nums,l,r);
    }
};
